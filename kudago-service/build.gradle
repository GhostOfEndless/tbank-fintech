plugins {
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'io.freefair.lombok' version '8.10'
    id 'java'
    id 'jacoco'
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.retry:spring-retry:2.0.9'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation project(':log-aspect')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    implementation 'org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-14'
    testImplementation 'org.wiremock:wiremock-standalone:3.9.1'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jvmArgs '-XX:+EnableDynamicAgentLoading'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/example/entity/",
                    "com/example/controller/payload/",
                    "com/example/exception/",
                    "com/example/client/dto/",
                    "**/Application**"
            ])
        }))
    }
}